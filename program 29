#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
sem_t empty;
sem_t full;
pthread_mutex_t mutex;

int buffer[BUFFER_SIZE];
int index_producer = 0;
int index_consumer = 0;

void *producer(void *arg)
 {
    int item = 1;
    while (1)
	 {
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[index_producer] = item;
        printf("Producer produced item: %d\n", item);
        index_producer = (index_producer + 1) % BUFFER_SIZE;
        item++;
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
        sleep(1); 
    }
}

void *consumer(void *arg)
 {
    while (1) 
	{
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        int item = buffer[index_consumer];
        printf("Consumer consumed item: %d\n", item);
        index_consumer = (index_consumer + 1) % BUFFER_SIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
        sleep(2); 
    }
}

int main()
 {
    pthread_t producer_thread, consumer_thread;
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
     return 0;
}
